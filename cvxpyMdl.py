"""
# This script contains the function generated by cvxopt package.
# 1 The SVM function is to solve the SVM lasso (L1) regression problem with only feature and labels (No comparison included).
# 2 The SVM_SVM is to solve SVMs for both absolute labels and comparison labels.
# 3 The Log_SVM function is to solve Logistic for absolute labels and SVM for comparison labels.
"""



import cvxpy as cp
import numpy as np

def SVM(absDataOrigin,absLabels, absWeight, lamda):
    # This function is the  SVM with L1 penalty.
    # Parameter:
    # ------------
    # absDataOrigin : N by d numpy matrix where N the number of absolute label data and d is the dimension of data
    # abslabels : (N,) numpy array, +1 means positive label and -1 represents negative labels
    # lamda : weight on L1 penalty. Large lamda would have more zeros in beta.

    # Return:
    # ------------
    # beta : the logistic regression model parameter
    # const : the logistic regression global constant.
    absN, d = np.shape(absDataOrigin)
    beta = cp.Variable(d)
    const = cp.Variable(1)
    objective = absWeight*cp.sum_entries(cp.pos(1 - cp.mul_elemwise(absLabels, absDataOrigin*beta+const)))\
                +lamda*cp.norm(beta,1)
    prob = cp.Problem(cp.Minimize(objective))
    prob.solve(solver=cp.SCS)
    return beta.value, const.value


def SVM_SVM(absDataOrigin,absLabels,cmpDataOrigin,cmpLabels, absWeight, lamda):
    # This function trains both absolute labels and comparison labels based on SVM.
    # Parameter:
    # ------------
    # absDataOrigin : N by d numpy matrix where N the number of absolute label data and d is the dimension of data
    # abslabels : (N,) numpy array, +1 means positive label and -1 represents negative labels
    # cmpDataOrigin : N by d numpy matrix where N the number of comparion label data and d is the dimension of data
    # cmpLabels : (N,) numpy array, +1 means positive label and -1 represents negative labels
    # absWeight : the Weight on absolute label data. And (1-absWeight) would be the weight on comparison data.
    # lamda : weight on L1 penalty. Large lamda would have more zeros in beta.

    # Return:
    # ------------
    # beta : the logistic regression model parameter
    # const : the logistic regression global constant.

    cmpWeight = 1.0 - absWeight
    absN, d = np.shape(absDataOrigin)
    cmpN, _ = np.shape(cmpDataOrigin)
    beta = cp.Variable(d)
    const = cp.Variable(1)
    objective = absWeight*cp.sum_entries(cp.pos(1 - cp.mul_elemwise(absLabels, absDataOrigin*beta+const)))\
                +cmpWeight*cp.sum_entries(cp.pos(1 - cp.mul_elemwise(cmpLabels, cmpDataOrigin*beta+const)))\
                +lamda*cp.norm(beta,1)
    prob = cp.Problem(cp.Minimize(objective))
    prob.solve(solver=cp.SCS)
    return beta.value, const.value



def Log_SVM(absDataOrigin,absLabels,cmpDataOrigin,cmpLabels, absWeight, lamda):
    # This function combined both logistic regression for absolute labels and SVM for comparison labels.
    # Parameter:
    # ------------
    # absDataOrigin : N by d numpy matrix where N the number of absolute label data and d is the dimension of data
    # abslabels : (N,) numpy array, +1 means positive label and -1 represents negative labels
    # lamda : weight on L1 penalty. Large lamda would have more zeros in beta.

    # Return:
    # ------------
    # beta : the logistic regression model parameter
    # const : the logistic regression global constant.
    cmpWeight = 1.0 -absWeight
    absN, d = np.shape(absDataOrigin)
    cmpN, _ = np.shape(cmpDataOrigin)
    beta = cp.Variable(d)
    const = cp.Variable(1)
    objective = absWeight*cp.sum_entries(cp.logistic(cp.mul_elemwise(absLabels, absDataOrigin*beta+const))\
                                         -cp.mul_elemwise(absLabels, absDataOrigin*beta+const))+ \
                cmpWeight * cp.sum_entries(cp.pos(1 - cp.mul_elemwise(cmpLabels, cmpDataOrigin * beta + const))) \
                + lamda * cp.norm(beta, 1)
    prob = cp.Problem(cp.Minimize(objective))
    prob.solve(solver=cp.SCS)
    return beta.value, const.value
